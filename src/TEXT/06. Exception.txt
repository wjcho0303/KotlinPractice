코틀린과 스프링 프레임워크를 사용하여 RESTful API의 예외를 처리할 때,
@RestControllerAdvice와 커스텀 예외 클래스를 활용하여 예외를 일관되게 관리할 수 있습니다.
여기에 ErrorResponse와 ErrorCode를 함께 사용하면 클라이언트에게 더 명확하고 유용한 오류 정보를 제공할 수 있습니다.

1. 커스텀 예외 클래스 정의
먼저, 애플리케이션에서 사용할 다양한 커스텀 예외 클래스를 정의합니다.

    package com.example.demo.exception

    // Resource Not Found Exception
    class ResourceNotFoundException(message: String) : RuntimeException(message)

    // Invalid Input Exception
    class InvalidInputException(message: String) : RuntimeException(message)

    // Unauthorized Access Exception
    class UnauthorizedAccessException(message: String) : RuntimeException(message)



2. ErrorCode 및 ErrorResponse 클래스 정의
ErrorCode와 ErrorResponse 클래스를 정의하여 예외 응답을 일관되게 관리합니다.

ErrorCode.kt)
    package com.example.demo.exception

    enum class ErrorCode(val code: String, val message: String) {
        RESOURCE_NOT_FOUND("404", "Resource not found"),
        INVALID_INPUT("400", "Invalid input provided"),
        UNAUTHORIZED_ACCESS("401", "Unauthorized access")
    }

ErrorResponse.kt)
    package com.example.demo.exception

    data class ErrorResponse(
        val code: String,
        val message: String
    )



3. @RestControllerAdvice를 사용한 전역 예외 처리
    package com.example.demo.advice

    import com.example.demo.exception.ErrorCode
    import com.example.demo.exception.ErrorResponse
    import com.example.demo.exception.InvalidInputException
    import com.example.demo.exception.ResourceNotFoundException
    import com.example.demo.exception.UnauthorizedAccessException
    import org.springframework.http.HttpStatus
    import org.springframework.http.ResponseEntity
    import org.springframework.web.bind.annotation.ExceptionHandler
    import org.springframework.web.bind.annotation.RestControllerAdvice

    @RestControllerAdvice
    class GlobalExceptionHandler {

        @ExceptionHandler(ResourceNotFoundException::class)
        fun handleResourceNotFoundException(ex: ResourceNotFoundException): ResponseEntity<ErrorResponse> {
            val errorResponse = ErrorResponse(ErrorCode.RESOURCE_NOT_FOUND.code, ex.message ?: ErrorCode.RESOURCE_NOT_FOUND.message)
            return ResponseEntity(errorResponse, HttpStatus.NOT_FOUND)
        }

        @ExceptionHandler(InvalidInputException::class)
        fun handleInvalidInputException(ex: InvalidInputException): ResponseEntity<ErrorResponse> {
            val errorResponse = ErrorResponse(ErrorCode.INVALID_INPUT.code, ex.message ?: ErrorCode.INVALID_INPUT.message)
            return ResponseEntity(errorResponse, HttpStatus.BAD_REQUEST)
        }

        @ExceptionHandler(UnauthorizedAccessException::class)
        fun handleUnauthorizedAccessException(ex: UnauthorizedAccessException): ResponseEntity<ErrorResponse> {
            val errorResponse = ErrorResponse(ErrorCode.UNAUTHORIZED_ACCESS.code, ex.message ?: ErrorCode.UNAUTHORIZED_ACCESS.message)
            return ResponseEntity(errorResponse, HttpStatus.UNAUTHORIZED)
        }

        @ExceptionHandler(Exception::class)
        fun handleGenericException(ex: Exception): ResponseEntity<ErrorResponse> {
            val errorResponse = ErrorResponse("500", "An unexpected error occurred")
            return ResponseEntity(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR)
        }
    }



4. @RestController 정의
    package com.example.demo.controller

    import com.example.demo.exception.InvalidInputException
    import com.example.demo.exception.ResourceNotFoundException
    import com.example.demo.exception.UnauthorizedAccessException
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.PathVariable
    import org.springframework.web.bind.annotation.RequestMapping
    import org.springframework.web.bind.annotation.RestController

    @RestController
    @RequestMapping("/api/resources")
    class MyController {

        @GetMapping("/{id}")
        fun getResource(@PathVariable id: String): String {
            return when (id) {
                "1" -> "Resource with id $id"
                "2" -> throw ResourceNotFoundException("Resource with id $id not found")
                "3" -> throw InvalidInputException("Invalid input for id $id")
                "4" -> throw UnauthorizedAccessException("Access denied for id $id")
                else -> throw IllegalArgumentException("Unknown error")
            }
        }
    }



5. 예외 발생 테스트
    요청)
        GET /api/resources/2
    응답)
        정상 리소스 내용


    요청)
        GET /api/resources/2
    응답)
        {
          "code": "404",
          "message": "Resource with id 2 not found"
        }


    요청)
        GET /api/resources/3
    응답)
        {
          "code": "400",
          "message": "Invalid input for id 3"
        }


    요청)
        GET /api/resources/4
    응답)
        {
          "code": "401",
          "message": "Access denied for id 4"
        }