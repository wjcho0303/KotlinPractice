코틀린에서 타입을 다루는 방법

### 기본 타입
코틀린은 자바와 호환성을 유지하면서도 자체적인 타입 시스템을 가지고 있습니다. 기본 타입은 다음과 같습니다:
- **정수 타입**: Byte, Short, Int, Long
- **부동 소수점 타입**: Float, Double
- **문자 타입**: Char
- **불리언 타입**: Boolean
- **문자열 타입**: String

코틀린의 기본 타입은 모두 객체입니다. 예를 들어, Int는 자바의 기본 타입 int와 호환되지만 객체로 취급됩니다.

    val a: Int = 10000
    val b: Int = a
    println(a === b)  // true, 동일 객체



### 참조 타입: Any
코틀린에서는 모든 것이 객체입니다. 모든 객체는 Any 타입의 인스턴스입니다.
Any는 자바의 Object와 비슷하지만, 더 많은 기능을 제공합니다.

    val x: Any = 42
    val y: Any = "Hello"



### Nullable 타입: ?
코틀린은 NullPointerException을 방지하기 위해 nullable 타입을 지원합니다. 타입 뒤에 ?를 붙여 nullable 타입을 나타냅니다.

    val name: String = "Kotlin"
    val nullableName: String? = null



### 타입 변환: as, as?
코틀린에서는 명시적인 타입 변환을 통해 타입을 변환합니다. as 키워드를 사용합니다.

    val obj: Any = "Hello"
    val str: String = obj as String

안전한 타입 변환을 위해 as?를 사용할 수 있습니다. 변환이 실패하면 null을 반환합니다.

    val obj: Any = 42
    val str: String? = obj as? String  // null



### 컬렉션 타입
코틀린은 다양한 컬렉션 타입을 제공합니다. 대표적인 컬렉션 타입으로는 List, Set, Map이 있습니다.

    val list: List<Int> = listOf(1, 2, 3)
    val mutableList: MutableList<Int> = mutableListOf(1, 2, 3)
    val set: Set<String> = setOf("a", "b", "c")
    val map: Map<String, Int> = mapOf("a" to 1, "b" to 2)



### 제네릭 타입
코틀린은 제네릭 타입을 사용하여 타입의 재사용성을 높입니다.

    class Box<T>(val value: T)

    val intBox = Box(1)
    val stringBox = Box("Hello")



### 타입 추론
코틀린은 대부분의 경우 타입을 추론할 수 있습니다. 변수 선언 시 타입을 명시하지 않아도 됩니다.

    val number = 42  // Int로 추론
    val text = "Hello"  // String으로 추론



### 고차 함수와 람다
코틀린은 함수를 변수에 저장하고, 다른 함수에 인자로 전달할 수 있습니다. 이를 통해 고차 함수와 람다를 사용할 수 있습니다.

    val sum: (Int, Int) -> Int = { x, y -> x + y }
    val result = sum(1, 2)



### 함수 타입
함수 타입을 변수로 사용할 수 있습니다. 함수 타입은 (매개변수 타입) -> 반환 타입 형식으로 선언됩니다.

    val printMessage: (String) -> Unit = { message -> println(message) }



### 확장 함수와 확장 프로퍼티
코틀린은 기존 클래스에 새로운 메서드와 프로퍼티를 추가할 수 있는 확장 함수를 제공합니다.

    fun String.lastChar(): Char = this[length - 1]

    val c = "Kotlin".lastChar()  // 'n'



### 중첩 클래스와 내부 클래스
코틀린은 클래스 내에 다른 클래스를 정의할 수 있습니다. 이를 중첩 클래스라고 합니다.
기본적으로 중첩 클래스는 외부 클래스의 참조를 가지지 않습니다.
내부 클래스를 만들려면 inner 키워드를 사용해야 합니다.

    class Outer {
        class Nested {
            fun foo() = "Nested class"
        }

        inner class Inner {
            fun foo() = "Inner class"
        }
    }

    val nested = Outer.Nested().foo()  // "Nested class"
    val inner = Outer().Inner().foo()  // "Inner class"



### 요약
코틀린은 강력하고 유연한 타입 시스템을 제공합니다.
기본 타입에서부터 제네릭, nullable 타입, 고차 함수, 확장 함수, 데이터 클래스, Sealed 클래스 등
다양한 기능을 통해 타입을 안전하고 효율적으로 다룰 수 있습니다.
이러한 기능들을 적절히 활용하면 더욱 안전하고 유지보수 가능한 코드를 작성할 수 있습니다.
