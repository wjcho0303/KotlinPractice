1. filter { 조건식 }
주어진 람다식 조건을 만족하는 요소만 포함하는 새로운 컬렉션을 생성합니다.

    val numbers = listOf(1, 2, 3, 4, 5)
    val evenNumbers = numbers.filter { it % 2 == 0 }
    println(evenNumbers)  // [2, 4]

    val employees = listOf("John", "Jane", "Jack", "Jill")
    val namesStartingWithJ = employees.filter { it.startsWith('J') }
    println(namesStartingWithJ)  // [John, Jane, Jack, Jill]



2. map { 람다식 }
각 요소를 변환하고 새로운 컬렉션을 반환합니다.

    val numbers = listOf(1, 2, 3)
    val doubledNumbers = numbers.map { it * 2 }
    println(doubledNumbers)  // [2, 4, 6]

    val prices = listOf(100, 200, 300)
    val priceWithTax = prices.map { it * 1.1 }
    println(priceWithTax)  // [110.0, 220.0, 330.0]



3. reduce { 람다식 }
컬렉션의 모든 요소를 결합하여 단일 값을 생성합니다. reduce는 첫 번째 요소를 초기값으로 사용하고, 나머지 요소를 누적 연산합니다.
초기값이 필요 없는 경우 reduce를 사용합니다.
    fun <T> Iterable<T>.reduce(operation: (acc: T, T) -> T): T

    val numbers = listOf(1, 2, 3, 4)
    val sum = numbers.reduce { acc, num -> acc + num }  // 'acc'는 누적값, 'num'은 현재 요소
    println(sum)  // 10

    val words = listOf("Hello", "World")
    val concatenated = words.reduce { acc, word -> "$acc $word" }  // 'acc'는 누적값, 'word'는 현재 요소
    println(concatenated)  // Hello World



4. fold(초기값) { 람다식 }
초기값과 함께 컬렉션의 모든 요소를 결합하여 단일 값을 생성합니다.
fold는 reduce와 비슷하지만, 초기값을 명시적으로 설정할 수 있습니다.

    val numbers = listOf(1, 2, 3, 4)
    val product = numbers.fold(1) { acc, num -> acc * num }  // 초기값 1과 누적 연산
    println(product)  // 24

    val names = listOf("Alice", "Bob", "Charlie")
    val sentence = names.fold("이름 목록:") { acc, name -> "$acc $name" }  // 초기값과 누적 연산
    println(sentence)  // 이름 목록: Alice Bob Charlie



5. flatMap { 람다식 }
컬렉션의 각 요소를 변환하여 여러 컬렉션을 평면화하여 하나의 컬렉션으로 만듭니다. flatMap은 내부 리스트를 하나의 리스트로 평평하게 만듭니다.

    val listOfLists = listOf(listOf(1, 2), listOf(3, 4))
    val flatList = listOfLists.flatMap { it }  // 내부 리스트를 평평하게 만듦
    println(flatList)  // [1, 2, 3, 4]

    val sentences = listOf("hello world", "goodbye world")
    val words = sentences.flatMap { it.split(" ") }  // 문장을 단어로 분리하여 평평하게 만듦
    println(words)  // [hello, world, goodbye, world]



6. groupBy { 람다식 }
컬렉션의 요소를 그룹화하여 키와 값의 쌍으로 구성된 맵을 생성합니다. 각 키에 대해 그룹화된 요소들을 맵의 값으로 사용합니다.

    val words = listOf("apple", "banana", "cherry", "apricot")
    val groupedByLength = words.groupBy { it.length }  // 단어의 길이에 따라 그룹화
    println(groupedByLength)  // {5=[apple], 6=[banana, cherry], 7=[apricot]}

    val numbers = listOf(1, 2, 3, 4, 5, 6)
    val evenOddGroups = numbers.groupBy { if (it % 2 == 0) "even" else "odd" }  // 짝수와 홀수 그룹화
    println(evenOddGroups)  // {even=[2, 4, 6], odd=[1, 3, 5]}



7. partition { 람다식 }
컬렉션을 조건에 따라 두 개의 리스트로 나누어 반환합니다. 조건을 만족하는 요소와 만족하지 않는 요소를 분리합니다.

    val numbers = listOf(1, 2, 3, 4, 5)
    val (evens, odds) = numbers.partition { it % 2 == 0 }  // 짝수와 홀수로 나누기
    println(evens)  // [2, 4]
    println(odds)   // [1, 3, 5]

    val words = listOf("apple", "banana", "cherry", "date")
    val (shortWords, longWords) = words.partition { it.length <= 5 }  // 짧은 단어와 긴 단어로 나누기
    println(shortWords)  // [apple, date]
    println(longWords)   // [banana, cherry]



8. sortedBy { 람다식 }
특정 기준에 따라 컬렉션의 요소를 정렬하여 새로운 리스트를 생성합니다. 기준을 제공하는 람다 함수를 사용하여 정렬합니다.

    val numbers = listOf(4, 2, 5, 1, 3)
    val sortedNumbers = numbers.sortedBy { it }  // 숫자를 오름차순으로 정렬
    println(sortedNumbers)  // [1, 2, 3, 4, 5]

    val products = listOf("apple", "banana", "cherry")
    val sortedByLength = products.sortedBy { it.length }  // 단어 길이에 따라 정렬
    println(sortedByLength)  // [apple, banana, cherry]



9. sortedByDescending { 람다식 }
특정 기준에 따라 컬렉션의 요소를 내림차순으로 정렬하여 새로운 리스트를 생성합니다. 기준을 제공하는 람다 함수를 사용하여 정렬합니다.

    val numbers = listOf(4, 2, 5, 1, 3)
    val sortedNumbersDesc = numbers.sortedByDescending { it }  // 숫자를 내림차순으로 정렬
    println(sortedNumbersDesc)  // [5, 4, 3, 2, 1]

    val products = listOf("apple", "banana", "cherry")
    val sortedByLengthDesc = products.sortedByDescending { it.length }  // 단어 길이에 따라 내림차순 정렬
    println(sortedByLengthDesc)  // [banana, cherry, apple]



10. any { 람다식 }
컬렉션의 요소 중 하나라도 주어진 조건을 만족하는지 확인합니다. 조건을 만족하는 요소가 있으면 true, 없으면 false를 반환합니다.

    val numbers = listOf(1, 2, 3, 4)
    val hasEven = numbers.any { it % 2 == 0 }  // 짝수 여부 확인
    println(hasEven)  // true

    val words = listOf("apple", "banana", "cherry")
    val hasShortWord = words.any { it.length < 5 }  // 5자 이하의 단어 존재 여부 확인
    println(hasShortWord)  // true



11. all { 람다식 }
컬렉션의 모든 요소가 주어진 조건을 만족하는지 확인합니다. 모든 요소가 조건을 만족하면 true, 그렇지 않으면 false를 반환합니다.

    val numbers = listOf(2, 4, 6)
    val allEven = numbers.all { it % 2 == 0 }  // 모든 숫자가 짝수인지 확인
    println(allEven)  // true

    val words = listOf("apple", "banana", "cherry")
    val allLongWords = words.all { it.length > 5 }  // 모든 단어가 5자 초과인지 확인
    println(allLongWords)  // false



12. count { 람다식 }
컬렉션에서 주어진 조건을 만족하는 요소의 수를 계산합니다. 조건을 만족하는 요소의 개수를 반환합니다.

    val numbers = listOf(1, 2, 3, 4, 5)
    val evenCount = numbers.count { it % 2 == 0 }  // 짝수의 개수
    println(evenCount)  // 2

    val words = listOf("apple", "banana", "cherry")
    val longWordCount = words.count { it.length > 5 }  // 5자 초과의 단어 개수
    println(longWordCount)  // 2



13. find { 람다식 }
컬렉션에서 주어진 조건을 만족하는 첫 번째 요소를 반환합니다. 조건을 만족하는 요소가 없으면 null을 반환합니다.

    val numbers = listOf(1, 2, 3, 4, 5)
    val firstEven = numbers.find { it % 2 == 0 }  // 첫 번째 짝수 찾기
    println(firstEven)  // 2

    val words = listOf("apple", "banana", "cherry")
    val firstLongWord = words.find { it.length > 5 }  // 첫 번째 5자 초과 단어 찾기
    println(firstLongWord)  // banana



14. distinct()
컬렉션에서 중복된 요소를 제거하여 새로운 리스트를 생성합니다. 리스트의 중복 요소를 제거합니다.

    val numbers = listOf(1, 2, 2, 3, 4, 4, 5)
    val distinctNumbers = numbers.distinct()  // 중복된 숫자 제거
    println(distinctNumbers)  // [1, 2, 3, 4, 5]

    val words = listOf("apple", "banana", "apple", "cherry")
    val distinctWords = words.distinct()  // 중복된 단어 제거
    println(distinctWords)  // [apple, banana, cherry]



15. take(number)
컬렉션의 처음 N개의 요소를 반환합니다. 새로운 리스트를 생성하여 반환합니다.

    val numbers = listOf(1, 2, 3, 4, 5)
    val firstThree = numbers.take(3)  // 처음 3개의 숫자 가져오기
    println(firstThree)  // [1, 2, 3]

    val words = listOf("apple", "banana", "cherry", "date")
    val firstTwoWords = words.take(2)  // 처음 2개의 단어 가져오기
    println(firstTwoWords)  // [apple, banana]


