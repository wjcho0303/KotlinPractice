코틀린에서 접근 제어는 클래스와 객체의 속성과 메서드의 접근성을 제어하는 데 사용됩니다.
접근 제어는 클래스의 내부 구현 세부사항을 숨기고, 객체 지향 프로그래밍의 캡슐화 원칙을 지원하는 중요한 기능입니다.

코틀린은 접근 제어를 위해 네 가지 주요 접근 제어자를 제공합니다: public, private, protected, 그리고 internal.
각 제어자의 사용 방법을 자세히 설명하겠습니다.



1. public 접근 제어자
기본 접근 제어자: 코틀린에서 명시적으로 접근 제어자를 지정하지 않으면, 기본적으로 public입니다.
접근 가능 범위: 해당 멤버는 어디에서나 접근할 수 있습니다.

    class Person(val name: String) {
        fun greet() {
            println("Hello, $name!")
        }
    }

    fun main() {
        val person = Person("Alice")
        person.greet()  // Hello, Alice!
    }

greet 메서드는 public으로, 어디서든 호출할 수 있습니다.



2. private 접근 제어자
클래스 내부 접근: private으로 선언된 멤버는 해당 클래스 내부에서만 접근할 수 있습니다. 클래스 외부에서는 접근할 수 없습니다.
파일 내부 접근: 파일 내부에서 선언된 private 멤버는 파일 내에서만 접근할 수 있습니다.

    class Person(private val name: String) {
        private fun greet() {
            println("Hello, $name!")
        }

        fun sayHello() {
            greet()  // 가능
        }
    }

    fun main() {
        val person = Person("Alice")
        person.sayHello()  // Hello, Alice!
        // person.greet()  // 오류: 'greet'은 private 멤버이므로 외부에서 접근할 수 없음
    }



3. protected 접근 제어자
클래스 및 서브클래스 접근: protected로 선언된 멤버는 해당 클래스와 서브클래스에서 접근할 수 있습니다.
외부 접근 불가: 클래스 외부에서는 접근할 수 없습니다.

    open class Animal {
        protected fun makeSound() {
            println("Some generic animal sound")
        }
    }

    class Dog : Animal() {
        fun bark() {
            makeSound()  // 가능: 'makeSound'는 protected로 선언되어 상속된 클래스에서 접근 가능
            println("Woof")
        }
    }

    fun main() {
        val dog = Dog()
        dog.bark()  // Some generic animal sound \n Woof
        // dog.makeSound()  // 오류: 'makeSound'은 protected 멤버이므로 외부에서 접근할 수 없음
    }



4. internal 접근 제어자
모듈 내부 접근: internal로 선언된 멤버는 같은 모듈 내에서만 접근할 수 있습니다.
모듈은 프로젝트 또는 빌드 아티팩트로, 하나의 모듈 내에서는 internal 멤버에 접근할 수 있지만, 다른 모듈에서는 접근할 수 없습니다.

    // 파일: InternalExample.kt

    internal class InternalClass {
        internal fun internalMethod() {
            println("Internal method")
        }
    }

    // 다른 파일이 같은 모듈에 있을 경우:
    fun main() {
        val internalClass = InternalClass()
        internalClass.internalMethod()  // 가능
    }



5. 상속과 접근 제어
    open class Parent {
        private val privateProperty = "Private"
        protected open val protectedProperty = "Protected"
        internal val internalProperty = "Internal"
        public val publicProperty = "Public"
    }

    class Child : Parent() {
        fun accessProperties() {
            // println(privateProperty) // 오류: 'privateProperty'는 Parent 클래스 외부에서 접근 불가
            println(protectedProperty)  // 가능: 'protectedProperty'는 서브클래스에서 접근 가능
            println(internalProperty)   // 가능: 같은 모듈 내에서 접근 가능
            println(publicProperty)     // 가능: 'publicProperty'는 어디서든 접근 가능
        }
    }





